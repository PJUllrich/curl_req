# Usage

```elixir
Mix.install([
  {:curl_req, github: "derekkraan/curl_req", override: true},
  {:merquery, "~> 0.3.0"},
  {:kino, "~> 0.14.2"},
])
```

## From cURL to Req

To generate a `Req` struct from a cURL command, you can either use the function `CurlReq.from_curl/1` or the `sigil_CURL`.

```elixir
import CurlReq

sigil = ~CURL(https://httpbin.org/get)
```

```elixir
function = CurlReq.from_curl("curl https://httpbin.org/get")
```

Both produce the same `Req.Request` but the macro checks the validity at compile time and you don't have to escape the string. As you can see, the cURL command itself ("curl") gets ignored and produces the same request.

```elixir
sigil === function
```

Let's see if `CurlReq` can understand a more complex cURL command

```elixir
~CURL(curl -H "Accept-Encoding: gzip" -H "User-Agent: firefox/111" https://httpsbin.org/get)
```

As we can see, the User-Agent ist stored in the header map but where is the Accept-Encoding header? If you look closely at the `Req.Request` struct, you can see that a new request step was added (`&Req.Steps.compressed/1`). `CurlReq` tries to use/translate the native functionalities of the underlying HTTP client, in this case `Req`.

## From Req to cURL

```elixir
req = Req.new(base_url: "http://httpbin.org", url: "/post", method: :post, json: %{foo: "bar"})
curl = CurlReq.to_curl(req)
```

To read it better we can hide the double string escaping with some `Kino` helpers

```elixir
Kino.Shorts.text(curl)
```

As you can see, the correct Accept headers get set and the JSON body gets correctly escaped.

<!-- livebook:{"break_markdown":true} -->

### Flag style

You can control if you want short or long flags in the generated cURL command

```elixir
CurlReq.to_curl(req, flags: :long)
```

### Flavor

You can control if you wan't to use the Req user agent instead of the native cURL command and if you want to set the implicit headers explicitly with this opion

```elixir
CurlReq.to_curl(req, flavor: :req)
```

## Third party integration

`CurlReq` is used in `Merquery` which describes itself as "Powered by the wonderful [`Req`](https://hexdocs.pm/req/readme.html) library, Merquery is an interactive and extensible
HTTP client for [Elixir](https://elixir-lang.org/) and [Livebook](https://livebook.dev/)"

<!-- livebook:{"break_markdown":true} -->

If you select the `Plugins` tab in the Smart Cell below you can activate the `CurlReq` plugin. This will log the request you make as a cURL command as you make the request. Just enter an URL and evaluate the cell, it will print the cURL command and after that the `Req.Response`.

<!-- livebook:{"attrs":"eyJxdWVyaWVzIjpbeyJhdXRoIjp7InNjaGVtZSI6Im5vbmUiLCJ0eXBlIjowLCJ2YWx1ZSI6IiJ9LCJib2R5Ijp7ImNvbnRlbnRUeXBlIjoibm9uZSIsImZvcm0iOltdLCJyYXciOiIifSwiaGVhZGVycyI6W10sIm9wdGlvbnMiOnsiY29udGVudFR5cGUiOiJlbGl4aXIiLCJyYXciOiIifSwicGFyYW1zIjpbXSwicGx1Z2lucyI6W3siYWN0aXZlIjp0cnVlLCJkZXNjcmlwdGlvbiI6IkEgY29sbGVjdGlvbiBvZiBzdGVwcywgdXNhYmxlIHdpdGggUmVxLiIsIm5hbWUiOiJDdXJsUmVxLlBsdWdpbiIsInZlcnNpb24iOm51bGx9XSwicmVxdWVzdF90eXBlIjoiZ2V0Iiwic3RlcHMiOnsiZXJyb3Jfc3RlcHMiOlt7ImFjdGl2ZSI6dHJ1ZSwiZG9jIjoiUmV0cmllcyBhIHJlcXVlc3QgaW4gZmFjZSBvZiBlcnJvcnMuIiwibmFtZSI6InJldHJ5In1dLCJyZXF1ZXN0X3N0ZXBzIjpbeyJhY3RpdmUiOnRydWUsImRvYyI6IlNldHMgdGhlIHVzZXItYWdlbnQgaGVhZGVyLiIsIm5hbWUiOiJwdXRfdXNlcl9hZ2VudCJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJBc2tzIHRoZSBzZXJ2ZXIgdG8gcmV0dXJuIGNvbXByZXNzZWQgcmVzcG9uc2UuIiwibmFtZSI6ImNvbXByZXNzZWQifSx7ImFjdGl2ZSI6dHJ1ZSwiZG9jIjoiRW5jb2RlcyB0aGUgcmVxdWVzdCBib2R5LiIsIm5hbWUiOiJlbmNvZGVfYm9keSJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJTZXRzIGJhc2UgVVJMIGZvciBhbGwgcmVxdWVzdHMuIiwibmFtZSI6InB1dF9iYXNlX3VybCJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJTZXRzIHJlcXVlc3QgYXV0aGVudGljYXRpb24uIiwibmFtZSI6ImF1dGgifSx7ImFjdGl2ZSI6dHJ1ZSwiZG9jIjoiQWRkcyBwYXJhbXMgdG8gcmVxdWVzdCBxdWVyeSBzdHJpbmcuIiwibmFtZSI6InB1dF9wYXJhbXMifSx7ImFjdGl2ZSI6dHJ1ZSwiZG9jIjoiVXNlcyBhIHRlbXBsYXRlZCByZXF1ZXN0IHBhdGguIiwibmFtZSI6InB1dF9wYXRoX3BhcmFtcyJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJTZXRzIHRoZSBcIlJhbmdlXCIgcmVxdWVzdCBoZWFkZXIuIiwibmFtZSI6InB1dF9yYW5nZSJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJQZXJmb3JtcyBIVFRQIGNhY2hpbmcgdXNpbmcgYGlmLW1vZGlmaWVkLXNpbmNlYCBoZWFkZXIuIiwibmFtZSI6ImNhY2hlIn0seyJhY3RpdmUiOnRydWUsImRvYyI6IlNldHMgYWRhcHRlciB0byBgcnVuX3BsdWcvMWAuIiwibmFtZSI6InB1dF9wbHVnIn0seyJhY3RpdmUiOnRydWUsImRvYyI6IkNvbXByZXNzZXMgdGhlIHJlcXVlc3QgYm9keS4iLCJuYW1lIjoiY29tcHJlc3NfYm9keSJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJTZXRzIGV4cGVjdGVkIHJlc3BvbnNlIGJvZHkgY2hlY2tzdW0uIiwibmFtZSI6ImNoZWNrc3VtIn0seyJhY3RpdmUiOnRydWUsImRvYyI6IlNpZ25zIHJlcXVlc3Qgd2l0aCBBV1MgU2lnbmF0dXJlIFZlcnNpb24gNC4iLCJuYW1lIjoicHV0X2F3c19zaWd2NCJ9XSwicmVzcG9uc2Vfc3RlcHMiOlt7ImFjdGl2ZSI6dHJ1ZSwiZG9jIjoiUmV0cmllcyBhIHJlcXVlc3QgaW4gZmFjZSBvZiBlcnJvcnMuIiwibmFtZSI6InJldHJ5In0seyJhY3RpdmUiOnRydWUsImRvYyI6IkhhbmRsZXMgSFRUUCA0eHgvNXh4IGVycm9yIHJlc3BvbnNlcy4iLCJuYW1lIjoiaGFuZGxlX2h0dHBfZXJyb3JzIn0seyJhY3RpdmUiOnRydWUsImRvYyI6IkZvbGxvd3MgcmVkaXJlY3RzLiIsIm5hbWUiOiJyZWRpcmVjdCJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJEZWNvbXByZXNzZXMgdGhlIHJlc3BvbnNlIGJvZHkgYmFzZWQgb24gdGhlIGBjb250ZW50LWVuY29kaW5nYCBoZWFkZXIuIiwibmFtZSI6ImRlY29tcHJlc3NfYm9keSJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOiJWZXJpZmllcyB0aGUgcmVzcG9uc2UgYm9keSBjaGVja3N1bS4iLCJuYW1lIjoidmVyaWZ5X2NoZWNrc3VtIn0seyJhY3RpdmUiOnRydWUsImRvYyI6IkRlY29kZXMgcmVzcG9uc2UgYm9keSBiYXNlZCBvbiB0aGUgZGV0ZWN0ZWQgZm9ybWF0LiIsIm5hbWUiOiJkZWNvZGVfYm9keSJ9LHsiYWN0aXZlIjp0cnVlLCJkb2MiOm51bGwsIm5hbWUiOiJvdXRwdXQifV19LCJ1cmwiOiJodHRwOi8vaHR0cGJpbi5vcmcvZ2V0IiwidmFyaWFibGUiOiJyZXNwIiwidmVyYnMiOlsiZ2V0IiwicG9zdCIsInB1dCIsInBhdGNoIiwiZGVsZXRlIiwiaGVhZCIsIm9wdGlvbnMiXX1dLCJxdWVyeUluZGV4IjowfQ","chunks":null,"kind":"Elixir.Merquery.SmartCell","livebook_object":"smart_cell"} -->

```elixir
req = Req.new(method: :get, url: "http://httpbin.org/get", headers: %{}, params: %{})
req = Enum.reduce([CurlReq.Plugin], req, fn plugin, acc -> plugin.attach(acc) end)
{req, resp} = Req.request(req)
resp
```

Another cool feature of `merquery` is, that you can import your cURL commands directly. Just copy the following request

```
curl --compressed -H "foo: bar" -X GET http://httpbin.org/get
```

and select the import icon from the top right of the Merquery cell below and paste it in the text area which will open.

<!-- livebook:{"attrs":"","chunks":null,"kind":"Elixir.Merquery.SmartCell","livebook_object":"smart_cell"} -->

```elixir
req =
  Req.new(
    method: :get,
    url: "http://httpbin.org/get",
    headers: %{"foo" => "bar"},
    params: %{}
  )
{req, resp6} = Req.request(req)
resp6
```

## Advanced Usage

Internally everything gets converted to a `CurlReq.Request` struct. So you can modify it and generate the cURL and Req commands from that. Say we wouldn't know how to set the user agent with the cURL command. The solution would be to add it afterwards with `CurlReq.Request.put_user_agent/2` and then encode it as a `Req` struct.

```elixir
  request = CurlReq.Curl.decode("curl -k -X POST https://example.com")
```

```elixir
request = CurlReq.Request.put_user_agent(request, "my_user_agent/1.0")
```

```elixir
CurlReq.Req.encode(request)
```

You could also implement the `CurlReq.Request` behaviour for other HTTP clients. Here's an example for a non existing fake client.

```elixir
defmodule MyHTTPClient do
  defstruct [:url, method: :get]
  @behaviour CurlReq.Request
  import CurlReq.Request

  @impl CurlReq.Request
  def decode(%__MODULE__{} = request, _opts \\ []) do
    %CurlReq.Request{}
    |> put_method(request.method)
    |> put_url(request.url)
  end

   @impl CurlReq.Request
  def encode(%CurlReq.Request{} = request, _opts \\ []) do
    %__MODULE__{url: URI.to_string(request.url), method: request.method}
  end
end
```

```elixir
%MyHTTPClient{url: "https://example.com", method: :post} 
|> MyHTTPClient.decode() 
|> CurlReq.Curl.encode()
```

```elixir
"curl -X PUT https://example.com"
|> CurlReq.Curl.decode()
|> MyHTTPClient.encode()
```
